# main.py
import streamlit as st
import pandas as pd
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder

from app.auth import check_credentials, register_user
from app.database import get_db_connection
from app.filters import apply_filters
from app.plots import plot_scatter, plot_histogram_bar, plot_line, plot_density, plot_heatmap

st.title("üìä Cybersecurity Attacks Dashboard")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if st.session_state.logged_in:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ª–æ–≥–∞—É—Ç–∞
    if st.button('Logout'):
        st.session_state.logged_in = False
        st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
        
        
# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
if not st.session_state.logged_in:
    option = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥"])
    
    if option == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        st.subheader("üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
        password = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
            if password == confirm_password:
                if register_user(username, password):
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
                else:
                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            else:
                st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    elif option == "–í—Ö–æ–¥":
        st.subheader("üîë –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        username = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email")
        password = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
        if st.button("–í–æ–π—Ç–∏"):
            if check_credentials(username, password):
                st.session_state.logged_in = True
                st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
else:
    st.sidebar.header("Filters")
    file_path = r"cybersecurity_attacks.csv"
    df = pd.read_csv(file_path)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü Timestamp –≤ datetime
    df['Timestamp'] = pd.to_datetime(df['Timestamp'], errors='coerce')
    if df['Timestamp'].isnull().any():
        st.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º LabelEncoder –¥–ª—è Severity Level (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    label_encoder = LabelEncoder()
    df['Severity Level Encoded'] = label_encoder.fit_transform(df['Severity Level'])
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    # severity_filter = st.sidebar.multiselect("Select Severity Level(s)", df['Severity Level'].unique(), default=list(df['Severity Level'].unique()))
    # attack_type_filter = st.sidebar.multiselect("Select Attack Type(s)", df['Attack Type'].unique(), default=list(df['Attack Type'].unique()))
    # year_filter = st.sidebar.slider("Select Year", min_value=int(df['Timestamp'].dt.year.min()),
    #                                 max_value=int(df['Timestamp'].dt.year.max()),
    #                                 value=(int(df['Timestamp'].dt.year.min()), int(df['Timestamp'].dt.year.max())))
    # packet_length_filter = st.sidebar.slider("Select Packet Length Range", min_value=int(df['Packet Length'].min()),
    #                                            max_value=int(df['Packet Length'].max()),
    #                                            value=(int(df['Packet Length'].min()), int(df['Packet Length'].max())))
    
    severity_filter = st.sidebar.multiselect("Select Severity Level(s)", df['Severity Level'].unique(), default=list(df['Severity Level'].unique()))
    attack_type_filter = st.sidebar.multiselect("Select Attack Type(s)", df['Attack Type'].unique(), default=list(df['Attack Type'].unique()))
    year_filter = st.sidebar.slider("Select Year", int(df['Timestamp'].dt.year.min()), int(df['Timestamp'].dt.year.max()), (int(df['Timestamp'].dt.year.min()), int(df['Timestamp'].dt.year.max())))
    packet_length_filter = st.sidebar.slider("Select Packet Length Range", int(df['Packet Length'].min()), int(df['Packet Length'].max()), (int(df['Packet Length'].min()), int(df['Packet Length'].max())))
    
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º
    filtered_df = apply_filters(df, severity_filter, attack_type_filter, year_filter, packet_length_filter)
    
    # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "Scatter Plots", 
        "Histogram & Bar Chart", 
        "Line Chart", 
        "Advanced Analysis", 
        "Pie Charts", 
        "Attack Overview"
    ])
    
    # –í–∫–ª–∞–¥–∫–∞ 1: Scatter Plots
    with tab1:
        st.subheader("üìå Scatter Plots")
        fig1, fig2, fig3 = plot_scatter(filtered_df)
        st.plotly_chart(fig1)
        st.plotly_chart(fig2)
        st.plotly_chart(fig3)
        st.subheader("Advanced Analysis")
        fig7 = plot_density(filtered_df)
        st.pyplot(fig7)
        
        fig8 = plot_heatmap(filtered_df)
        st.pyplot(fig8)
    
    # –í–∫–ª–∞–¥–∫–∞ 2: Histogram & Bar Chart
    with tab2:
        st.subheader("üìä Histogram & Bar Chart")
        fig4, fig5 = plot_histogram_bar(filtered_df)
        st.plotly_chart(fig4)
        st.plotly_chart(fig5)
    
    # –í–∫–ª–∞–¥–∫–∞ 3: Line Chart
    with tab3:
        st.subheader("üìà Line Chart")
        fig6 = plot_line(filtered_df)
        st.plotly_chart(fig6)
    
    # –í–∫–ª–∞–¥–∫–∞ 4: Advanced Analysis
    with tab4:
        st.subheader("üîç Advanced Analysis")
        high_severity = filtered_df[
            (filtered_df['Severity Level'].str.contains('High', case=False, na=False)) &
            (filtered_df['Attack Type'] == 'DDoS')
        ]
        high_severity = high_severity.sort_values(by='Timestamp', ascending=True)
        st.write(high_severity[['Timestamp', 'Severity Level', 'Attack Type', 'Source IP Address', 'Destination IP Address']].head(10))
        
        st.subheader("üî¢ Anomaly Scores Distribution")
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.histplot(filtered_df['Anomaly Scores'], bins=30, kde=True, ax=ax)
        ax.set_title("Histogram of Anomaly Scores")
        st.pyplot(fig)
        
        filtered_df['Year'] = filtered_df['Timestamp'].dt.year
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(x=filtered_df['Year'], y=filtered_df['Anomaly Scores'], ax=ax)
        ax.set_title("Boxplot of Anomaly Scores by Year")
        st.pyplot(fig)
    
    # –í–∫–ª–∞–¥–∫–∞ 5: Pie Charts
    with tab5:
        st.subheader("üéØ Pie Charts")
        st.subheader("Distribution of Severity Levels")
        fig, ax = plt.subplots(figsize=(8, 5))
        filtered_df['Severity Level'].value_counts().plot(kind='pie', autopct='%1.1f%%', colors=sns.color_palette("pastel"), startangle=90, ax=ax)
        ax.set_ylabel("")
        st.pyplot(fig)
        
        st.subheader("Pie Chart of Action Taken")
        fig, ax = plt.subplots(figsize=(8, 8))
        filtered_df['Action Taken'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90, ax=ax)
        ax.set_ylabel("")
        st.pyplot(fig)
    
    # –í–∫–ª–∞–¥–∫–∞ 6: Attack Overview
    with tab6:
        # st.subheader("üìä Attack Overview: Severity vs Packet Length (Animated)")
        # attack_types = ['DDoS', 'Phishing', 'Malware', 'SQL Injection', 'Brute Force', 'MITM', 'DoS']
        # attack_filter = st.sidebar.multiselect("Select Attack Type(s)", attack_types, default=attack_types)
        # filtered_attack_df = filtered_df[filtered_df['Attack Type'].isin(attack_filter)]
        
        # if filtered_attack_df.empty:
        #     st.warning("No data available for the selected attack types. Please try selecting different types.")
        
        # fig_attack_overview = px.scatter(
        #     filtered_attack_df,
        #     x='Packet Length',
        #     y='Severity Level',
        #     size='Anomaly Scores',
        #     color='Attack Type',
        #     animation_frame="Timestamp",
        #     animation_group="Attack Type",
        #     log_x=True,
        #     size_max=60,
        #     title="Severity vs Packet Length Over Time (Animated)",
        #     category_orders={"Attack Type": attack_types}
        # )
        # st.plotly_chart(fig_attack_overview)
        

        # Select Attack Types
        # –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤ –∞—Ç–∞–∫
        attack_types = ['DDoS', 'Phishing', 'Malware', 'SQL Injection', 'Brute Force', 'MITM', 'DoS']
        selected_attacks = st.sidebar.multiselect(
            "Select Attack Type(s):", 
            attack_types, 
            default=attack_types,
            key="attack_types_multiselect"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –∞—Ç–∞–∫
        if not selected_attacks:
            selected_attacks = attack_types

        # –§–∏–ª—å—Ç—Ä —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        severity_levels = filtered_df['Severity Level'].unique().tolist()
        selected_severity = st.sidebar.multiselect(
            "Select Severity Level(s):", 
            severity_levels, 
            default=severity_levels,
            key="severity_levels_multiselect"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        if not selected_severity:
            selected_severity = severity_levels

        # –§–∏–ª—å—Ç—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Timestamp)
        time_min = filtered_df['Timestamp'].min().to_pydatetime()
        time_max = filtered_df['Timestamp'].max().to_pydatetime()
        time_range = st.sidebar.slider(
            "Select Time Range:", 
            min_value=time_min, 
            max_value=time_max, 
            value=(time_min, time_max),
            key="time_range_slider"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
        )

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        filtered_attack_df = filtered_df[(filtered_df['Attack Type'].isin(selected_attacks)) & 
                                        (filtered_df['Severity Level'].isin(selected_severity)) &
                                        (filtered_df['Timestamp'].between(pd.Timestamp(time_range[0]), pd.Timestamp(time_range[1])))]

        # Scatter Plot: Severity vs Packet Length (Animated)
        st.subheader("üìä Attack Overview: Severity vs Packet Length (Animated)")
        if filtered_attack_df.empty:
            st.warning("No data available for the selected filters. Please adjust your filters.")
        else:
            fig_attack_overview = px.scatter(
                filtered_attack_df, 
                x='Packet Length', 
                y='Severity Level', 
                size='Anomaly Scores', 
                color='Attack Type', 
                animation_frame="Timestamp", 
                animation_group="Attack Type",
                log_x=True, 
                size_max=60, 
                title="Severity vs Packet Length Over Time (Animated)")
            st.plotly_chart(fig_attack_overview)

        # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
        st.subheader("üìà Severity Level Distribution")
        if filtered_attack_df.empty:
            st.warning("No data available for the selected filters.")
        else:
            fig_severity_dist = px.histogram(filtered_attack_df, x="Severity Level", nbins=30, color="Attack Type", barmode="overlay")
            st.plotly_chart(fig_severity_dist)

        # Bar Chart: –¢–æ–ø-10 –∞—Ç–∞–∫ –ø–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ)
        st.subheader("üí∞ Top 10 Attacks by Anomaly Score")
        if filtered_attack_df.empty:
            st.warning("No data available for the selected filters.")
        else:
            latest_timestamp = filtered_attack_df["Timestamp"].max()
            top_attacks = filtered_attack_df[filtered_attack_df["Timestamp"] == latest_timestamp].nlargest(10, "Anomaly Scores")
            fig_top_attacks = px.bar(top_attacks, x="Attack Type", y="Anomaly Scores", color="Severity Level", title=f"Top 10 Attacks by Anomaly Score ({latest_timestamp})")
            st.plotly_chart(fig_top_attacks)

        # –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: –¢—Ä–µ–Ω–¥ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        st.subheader("üìä Anomaly Score Trends Over Time")
        if filtered_attack_df.empty:
            st.warning("No data available for the selected filters.")
        else:
            fig_anomaly_trend = px.line(filtered_attack_df, x="Timestamp", y="Anomaly Scores", color="Attack Type", title="Anomaly Scores Over Time")
            st.plotly_chart(fig_anomaly_trend)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        if st.checkbox("Show Filtered Data Table"):
            st.write(filtered_attack_df)
        
        # st.subheader("üìà Attack Severity Distribution by Attack Type")
        # fig2 = px.histogram(
        #     filtered_attack_df,
        #     x="Packet Length",
        #     nbins=30,
        #     color="Severity Level",
        #     barmode="overlay",
        #     title="Packet Length Distribution by Severity Level"
        # )
        # st.plotly_chart(fig2)
        
        # st.subheader("üí£ Top Attack Types by Severity Level")
        # latest_year = filtered_attack_df["Timestamp"].max()
        # top_attack_types = filtered_attack_df[filtered_attack_df["Timestamp"] == latest_year].groupby('Attack Type').agg({
        #     'Packet Length': 'mean',
        #     'Severity Level': 'first'
        # }).reset_index()
        # fig3 = px.bar(
        #     top_attack_types,
        #     x="Attack Type",
        #     y="Packet Length",
        #     color="Severity Level",
        #     title=f"Top Attack Types by Packet Length (Severity Level) in {latest_year}",
        #     category_orders={"Attack Type": attack_types}
        # )
        # st.plotly_chart(fig3)
        
        # st.subheader("üìä Attack Trends Over Time by Attack Type")
        # fig4 = px.line(
        #     filtered_attack_df,
        #     x="Timestamp",
        #     y="Packet Length",
        #     color="Attack Type",
        #     title="Packet Length Over Time by Attack Type"
        # )
        # st.plotly_chart(fig4)
        
        if st.checkbox("Show Data Table"):
            st.write(filtered_attack_df)
    